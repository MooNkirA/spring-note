<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-lazy-init="false">

    <!-- 传统标签 -->
    <bean id="student" class="com.moon.spring.bean.Student"/>

    <!--
        description子标签与meta子标签，在解析封装到BeanDefinition对象中时，
        会有一个相关的属性进去存储这部分配置值，一般只是起java doc的注释作用
     -->
    <bean class="com.moon.spring.bean.Student" id="student2">
        <description>com.moon.spring.common.bean.Student</description>
        <meta key="key1" value="value1"/>
    </bean>

    <!--
        抽象属性abstract使用示例，比较少用
        此案例中，实际上Parent类与Son类是没有继承关系的，但通过配置此标签parent属性，使Son类与Parent类有继承关系
        如果将Son类中的username属性注释，也会继承父类中的username属性
        注：以下在解析过程中是这两个不同的BeanDefinition对象，但会在实例化过程中合并成一个。但实际这两个类是没有关系，
     -->
    <bean id="parent" class="com.moon.spring.bean.Parent" abstract="true">
        <property name="username" value="parent name"/>
    </bean>
    <bean id="son" class="com.moon.spring.bean.Son" parent="parent">
        <!--<property name="username" value="son name"/>-->
        <property name="age" value="18"/>
    </bean>

    <!--
        init-method 属性与 destroy-method 属性测试
            就是定义bean创建与销毁时需要执行的方法
    -->
    <bean class="com.moon.spring.bean.InitDestroyBean" id="initDestroyBean"
          init-method="initMehtod" destroy-method="destroyMethod"/>

    <!--
        autowire-candidate属性设置为 false 时，此时容器在查找@Autowired自动装配该对象时，将不考虑该 bean，即它不会被考虑作为其它 bean 自动装配的候选者，
        但是该 bean 本身还是可以使用自动装配来注入其它 bean 的。
        测试方式：在某个被spring管理的类中注入此对象进行测试，此时启动会报错
        primary属性测试：配置@Primary注解，优先选择指定某个实现类进去注入
     -->
    <bean class="com.moon.spring.service.AccountServiceImpl" id="accountService"
          autowire-candidate="false" scope="singleton" primary="true"/>

    <!--
       factory-bean 属性与 factory-method 属性测试
        即是将FactoryBean实例化的操作不交给spring去管理，而通过FactoryBeanCreator这个类中相应配置factory-method去进行FactoryBean的实例化，
        从源码分析可知，主要的调用形式有以下两种：
        1. 配置`factory-bean`属性，`factory-method`指定类中的非静态方法，此时class属性失效
        2. 如不配置`factory-bean`属性，则必须配置`class`属性，并且`factory-method`指定类中的静态方法
        注：spring框架有这种功能，但没有什么应用场景
    -->
    <bean class="com.moon.spring.service.FactoryBeanCreator" id="factoryBeanCreator"/>
    <bean id="factoryBean" factory-bean="factoryBeanCreator" factory-method="factoryMethod"/>

    <!--
        lookup-method子标签测试
            相当于调用某个方法返回一个接口（如：getPeople()方法返回People对象）
            通过lookup-method属性可以指定bean的值，返回的接口所对应的实现类对象（即此处返回了Woman这个实现类）
     -->
    <bean id="woman" class="com.moon.spring.bean.Woman" lazy-init="false"/>
    <bean id="peopleService" class="com.moon.spring.service.PeopleService">
        <!-- 在PeopleService类的相应方法上使用注解@Lookup("woman")，效果一样 -->
        <lookup-method name="getPeople" bean="woman"/>
    </bean>

    <!--
        replaced-method子标签测试
           指定一个类实现MethodReplacer接口，设置需要替换的方法名name属性，与方法的参数arg-type子标签，替换原来的方法
     -->
    <bean id="replaceBean" class="com.moon.spring.bean.ReplaceBean" lazy-init="false"/>
    <bean id="originBean" class="com.moon.spring.bean.OriginBean">
        <replaced-method name="replaceMethod" replacer="replaceBean">
            <!-- 方法可能出现重载的情况，所以需要根据类型和方法名去准确定位到方法 -->
            <arg-type match="java.lang.String"/>
        </replaced-method>
    </bean>

    <!-- constructor-arg子标签测试（现在几乎不使用） -->
    <bean class="com.moon.spring.bean.ConstructorArgBean" id="constructorArgBean">
        <constructor-arg name="username" value="moon" index="0" type="java.lang.String"/>
        <constructor-arg name="password" value="123" index="1" type="java.lang.String"/>
    </bean>

    <!-- property子标签测试（此方式几乎不使用，直接使用@Value实现） -->
    <bean class="com.moon.spring.bean.PropertyBean" id="propertyBean">
        <property name="username" value="MoonZero"/>
        <property name="password" value="123"/>
    </bean>

    <!--
        使用p/c空间名称去封装装饰bean，
            p空间名称前缀标签是用于替换<property>标签方式
            c空间名称前缀标签是用于替换<constructor-arg>标签方式
        注：基本不会使用，因为都直接使用@Value注解给属性赋值
     -->
    <bean class="com.moon.spring.bean.DecoratorBean" id="decoratorBean"
          p:username="Moon" p:password="123" c:age="12" c:sex="1"/>

</beans>