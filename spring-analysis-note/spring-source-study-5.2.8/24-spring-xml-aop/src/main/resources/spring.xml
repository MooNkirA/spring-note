<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
       default-lazy-init="false">

    <bean class="com.moon.spring.service.impl.LogServiceImpl" id="logService"/>
    <!--<bean class="com.moon.spring.aop.aspect.AspectXml2" id="aspectXml2"/>
    <bean class="com.moon.spring.aop.aspect.AspectXml3" id="aspectXml3"/>-->
    <bean class="com.moon.spring.aop.aspectj.AdvisorAdvice" id="advisorAdvice"/>

    <!-- 开启spring容器对AOP注解的支持（此示例没有使用注解，只是用于示范） -->
    <aop:aspectj-autoproxy proxy-target-class="false" expose-proxy="true"/>

    <!-- xml声明aop的配置 -->
    <aop:config proxy-target-class="false">
        <!-- <aop:pointcut>在此处定义的pointcut是全局的pointcut可以供所有的aspect使用 -->
        <!-- id:表示这个pointcut的名称，以方便使用 -->
        <aop:pointcut id="addpointcut"
                      expression="execution(public * com.moon.spring.service..*.add(..))"/>
        <aop:pointcut id="delpointcut"
                      expression="execution(public * com.moon.spring.service..*.del*(..))"/>
        <aop:pointcut id="myMethods"
                      expression="execution(public * com.moon.spring.service..*.*(..))"/>

        <!-- advisor必须在aspect之前，要不然有xml约束报错 -->
<!--        <aop:advisor advice-ref="advisorAdvice" order="2" pointcut-ref="myMethods"/>-->

        <aop:aspect id="aspect1" ref="advisorAdvice" order="0">
            <!--<aop:declare-parents types-matching="com.moon.spring.service.MyServiceImpl"
                                 implement-interface="com.moon.spring.aop.IntroductionIntf"
                                 delegate-ref="myintroduction"/>-->
            <!-- id:表示这个pointcut的名称，以方便使用 -->
            <aop:pointcut id="myMethod2"
                          expression="execution(public * com.moon.spring.service..*.*(..)) and @annotation(org.springframework.web.bind.annotation.RequestMapping)"/>
            <aop:before method="beforeAdvice" pointcut-ref="myMethods"/>
            <aop:after method="afterAdvice" pointcut-ref="myMethods"/>
            <!-- 后置通知  returning="returnVal" 定义返回值 必须与类中声明的名称一样-->
            <aop:after-returning method="afterReturnningAdvice" returning="returnVal"
                                 pointcut="execution(public * com.moon.spring.service..*.*(..))"/>
            <!-- 异常通知 throwing="throwable" 指定异常通知错误信息变量,必须与类中声明的名称一样 -->
             <aop:after-throwing method="afterThrowingAdvice" throwing="e" pointcut-ref="myMethods"/>
            <aop:around method="aroudAdvice" pointcut-ref="myMethods"/>
        </aop:aspect>

        <!--<aop:aspect ref="aspectXml2" order="1">
            &lt;!&ndash; id:表示这个pointcut的名称，以方便使用 &ndash;&gt;
            <aop:pointcut id="myMethod3"
                          expression="execution(public * com.moon.spring.service..*.*(..))"/>
            <aop:before method="before" pointcut-ref="myMethods"/>
            <aop:after method="after" pointcut-ref="myMethod3"/>
            &lt;!&ndash; 后置通知  returning="returnVal" 定义返回值 必须与类中声明的名称一样 &ndash;&gt;
            <aop:after-returning method="afterReturning" returning="returnVal"
                                 pointcut="execution(public * com.moon.spring.service..*.*(..))"/>
            &lt;!&ndash; 异常通知 throwing="throwable" 指定异常通知错误信息变量,必须与类中声明的名称一样 &ndash;&gt;
            &lt;!&ndash; <aop:after-throwing method="afterthrowing" throwing="e" pointcut-ref="myMethods"/> &ndash;&gt;
            <aop:around method="around" pointcut-ref="myMethod3"/>
        </aop:aspect>-->
    </aop:config>

    <!--<aop:config proxy-target-class="false">
        <aop:pointcut id="myMethods"
                      expression="execution(public * com.moon.spring.service..*.*(..))"/>
        <aop:aspect id="aspect3" ref="aspectXml3" order="0">
            &lt;!&ndash;<aop:declare-parents types-matching="com.moon.spring.service.MyServiceImpl"
                                 implement-interface="com.moon.spring.aop.IntroductionIntf"
                                 delegate-ref="myintroduction"/>&ndash;&gt;
            &lt;!&ndash; id:表示这个pointcut的名称，以方便使用 &ndash;&gt;
            <aop:pointcut id="myMethod2"
                          expression="execution(public * com.moon.spring.service..*.*(..))"/>
            <aop:before method="before" pointcut-ref="myMethods"/>
            <aop:after method="after" pointcut-ref="myMethod2"/>
            &lt;!&ndash; 后置通知  returning="returnVal" 定义返回值 必须与类中声明的名称一样 &ndash;&gt;
            <aop:after-returning method="afterReturning" returning="returnVal"
                                 pointcut="execution(public * com.moon.spring.service..*.*(..))"/>
            &lt;!&ndash; 异常通知 throwing="throwable" 指定异常通知错误信息变量,必须与类中声明的名称一样 &ndash;&gt;
            &lt;!&ndash; <aop:after-throwing method="afterthrowing" throwing="e" pointcut-ref="myMethods"/> &ndash;&gt;
            <aop:around method="around" pointcut-ref="myMethod2"/>
        </aop:aspect>
    </aop:config>-->

</beans>